// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ユーザーモデル
model User {
  id                Int             @id @default(autoincrement())
  email             String          @unique
  name              String?
  password          String
  role              String          @default("USER") // USER, ADMIN
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  bookings          Booking[]
  reviews           Review[]
  paymentInfo       PaymentInfo[]
}

// アクティビティモデル
model Activity {
  id                Int             @id @default(autoincrement())
  name              String
  description       String          @db.Text
  price             Float
  duration          Int             // 分単位
  maxParticipants   Int
  images            ActivityImage[]
  location          String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  bookings          Booking[]
  reviews           Review[]
  availability      Availability[]
}

// アクティビティ画像モデル
model ActivityImage {
  id                Int             @id @default(autoincrement())
  url               String
  activityId        Int
  activity          Activity        @relation(fields: [activityId], references: [id], onDelete: Cascade)
  createdAt         DateTime        @default(now())
}

// 予約モデル
model Booking {
  id                Int             @id @default(autoincrement())
  userId            Int
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  activityId        Int
  activity          Activity        @relation(fields: [activityId], references: [id], onDelete: Cascade)
  date              DateTime
  status            String          @default("PENDING") // PENDING, CONFIRMED, CANCELED
  participants      Int
  totalPrice        Float
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  payment           Payment?
}

// 空き状況モデル
model Availability {
  id                Int             @id @default(autoincrement())
  activityId        Int
  activity          Activity        @relation(fields: [activityId], references: [id], onDelete: Cascade)
  date              DateTime
  availableSpots    Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

// レビューモデル
model Review {
  id                Int             @id @default(autoincrement())
  userId            Int
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  activityId        Int
  activity          Activity        @relation(fields: [activityId], references: [id], onDelete: Cascade)
  rating            Int
  comment           String?         @db.Text
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

// 問い合わせモデル
model Contact {
  id                Int             @id @default(autoincrement())
  name              String
  email             String
  subject           String
  message           String          @db.Text
  status            String          @default("NEW") // NEW, RESPONDED
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

// 決済モデル
model Payment {
  id                Int             @id @default(autoincrement())
  bookingId         Int             @unique
  booking           Booking         @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  amount            Float
  paymentMethod     String          // CREDIT_CARD, ELECTRONIC_PAYMENT
  status            String          @default("PENDING") // PENDING, COMPLETED, FAILED
  transactionId     String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

// 決済情報モデル
model PaymentInfo {
  id                Int             @id @default(autoincrement())
  userId            Int
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String          // CREDIT_CARD, ELECTRONIC_PAYMENT
  lastFour          String?         // クレジットカードの下4桁
  expiryDate        String?         // MM/YY形式
  token             String?         // 支払いゲートウェイ用のトークン
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}
